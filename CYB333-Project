import requests
import socket
import ssl
from urllib.parse import urlparse


def check_website_security(url):
    """Checks the security of a website by analyzing its SSL certificate."""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
    }

    try:
        # Make an HTTP request to the provided URL
        response = requests.get(url, headers=headers, verify=True)

        if response.ok:
            # Parse the URL to extract the hostname
            parsed_url = urlparse(url)
            hostname = parsed_url.netloc

            # Create a default SSL context
            context = ssl.create_default_context()

            try:
                # Establish a socket connection and wrap it with SSL
                with socket.create_connection((hostname, 443), timeout=5) as sock:
                    with context.wrap_socket(sock, server_hostname=hostname) as sslsock:
                        # Get the SSL certificate and extract subject and issuer details
                        cert = sslsock.getpeercert()
                        subject = dict(x[0] for x in cert['subject'])
                        issuer = dict(x[0] for x in cert['issuer'])

                        # Print the website security report
                        print("Website Security Report")
                        print("Subject:", subject['commonName'])
                        print("Issuer:", issuer['commonName'])
                        print("Valid From:", cert['notBefore'])
                        print("Valid Until:", cert['notAfter'])
                        print("")

                        # Add more security checks if needed

            except socket.timeout:
                # Handle the timeout error
                print("Error: Connection timed out. Please check the URL or try again later.")

        else:
            # Print the error if the response status is not OK
            print("Error:", response.status_code)

    except requests.exceptions.RequestException as e:
        # Print the error if an exception occurs during the request
        print("Error:", str(e))


if __name__ == "__main__":
    # Prompt the user to enter a website URL and check its security
    url = input("Enter website URL: ")
    check_website_security(url)
